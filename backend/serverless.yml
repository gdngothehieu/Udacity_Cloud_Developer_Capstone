org: gdngothehieu
app: serverless-super-app-immortal
service: serverless-certification-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  - serverless-reqvalidator-plugin

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: "20201221"

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    CERTIFICATION_TABLE: Certification-super-${self:provider.stage}
    CERTIFICATION_CREATED_AT_INDEX: CreatedAtIndex
    ATTACHMENT_S3_BUCKET: s3-super-bucket-gdngothehieu-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    Auth_0_Secret: tdUydf6LH1SKExVhv-1v85Y_nSXxhBjj7gvS1Xv6Rmj3YBu-DnoSuKtZLlwCGd2U
    AUTH_0_JSON_WEB_KEY_SET_URL: https://dev-mm0vvjb8.us.auth0.com/.well-known/jwks.json
  logs:
    # Enable API Gateway logs
    restApi: true

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - xray:PutTelemetryRecords
            - xray:PutTraceSegments
          Resource: "*"

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetCertification:
    handler: src/lambda/http/getCertification.handler
    events:
      - http:
          method: get
          path: certification
          cors: true

    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CERTIFICATION_TABLE}/index/${self:provider.environment.CERTIFICATION_CREATED_AT_INDEX}

  CreateCertification:
    handler: src/lambda/http/createCertification.handler
    events:
      - http:
          method: post
          path: certification
          cors: true

          request:
            schemas:
              application/json: ${file(models/create-certification-model.json)}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CERTIFICATION_TABLE}

  # Provide property for setting up CORS, Authorizer, iamRoleStatements, and request schemas
  UpdateCertification:
    handler: src/lambda/http/updateCertification.handler
    events:
      - http:
          method: patch
          path: certification/{certificationId}
          cors: true

    iamRoleStatements:
      - Effect: "Allow" # xray permissions (required)
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CERTIFICATION_TABLE}

  # Provide property for setting up CORS, Authorizer, iamRoleStatements
  DeleteCertification:
    handler: src/lambda/http/deleteCertification.handler
    events:
      - http:
          method: delete
          path: certification/{certificationId}
          cors: true

    iamRoleStatements:
      - Effect: "Allow" # xray permissions (required)
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CERTIFICATION_TABLE}

  # Provide property for setting up CORS, Authorizer, iamRoleStatements
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: certification/{certificationId}/attachment
          cors: true

    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CERTIFICATION_TABLE}

resources:
  Resources:
    # Add necessary AWS resources. You will need at least the following AWS resources
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    CertificationTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: certificationId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: certificationId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.CERTIFICATION_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.CERTIFICATION_CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index

    # Do not forget to add the CorsConfiguration propoerty
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENT_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    # For cross referencing the name of the bucket, use "!Ref AttachmentsBucket"
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: minhdvid
          Version: "2012-10-17"
          Statement:
            - Sid: StatementMinhdv
              Effect: Allow
              Principal: "*"
              Action: "s3:GetObject"
              Resource: "arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*"
        Bucket: !Ref AttachmentsBucket
